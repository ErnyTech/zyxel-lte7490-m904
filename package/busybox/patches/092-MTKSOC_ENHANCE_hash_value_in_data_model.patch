Index: busybox-1_20_1/loginutils/passwd.c
===================================================================
--- busybox-1_20_1.orig/loginutils/passwd.c	2022-06-29 21:01:57.663830000 +0800
+++ busybox-1_20_1/loginutils/passwd.c	2022-06-29 20:57:23.519830000 +0800
@@ -107,6 +107,34 @@
 	return ret;
 }
 
+#ifdef SHA512_PASSWD
+static char* hash_password(const char *algo, const char *pwd, char *salt)
+{
+	char *newp = NULL;
+	char *ret = NULL; /* failure so far */
+	char newsalt[MAX_PW_SALT_LEN];
+
+	if (pwd == NULL){
+		goto err_ret;
+	}
+
+	newp = pwd;
+	if(salt == NULL){
+		crypt_make_pw_salt(newsalt, algo);
+		salt = newsalt;
+	}
+
+	/* pw_encrypt returns malloced str */
+	ret = pw_encrypt(newp, salt, 1);
+	/* whee, success! */
+
+ err_ret:
+	nuke_str(newp);
+	if (ENABLE_FEATURE_CLEAN_UP) free(newp);
+
+	return ret;
+}
+#endif
 int passwd_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int passwd_main(int argc UNUSED_PARAM, char **argv)
 {
@@ -118,6 +146,10 @@
 //SHA512_PASSWD
 		OPT_pwd = (1 << 4), /* -p - new password */
 //SHA512_PASSWD
+#ifdef SHA512_PASSWD
+		OPT_noUpdate = (1 << 5), /* -v - only show password on screen, no update to file*/
+		OPT_salt = (1 << 6), /* -s - salt  */
+#endif
 		OPT_lud    = OPT_lock | OPT_unlock | OPT_delete,
 	};
 	unsigned opt;
@@ -126,6 +158,9 @@
 //SHA512_PASSWD
 	const char *opt_p = NULL;
 //SHA512_PASSWD
+#ifdef SHA512_PASSWD
+	const char *opt_s = NULL;
+#endif
 	const char *filename;
 	char *myname;
 	char *name;
@@ -146,116 +181,133 @@
 #if 0
 	opt = getopt32(argv, "a:lud", &opt_a);
 #else
+#ifdef SHA512_PASSWD
+	opt = getopt32(argv, "a:ludp:ns:", &opt_a, &opt_p, &opt_s);
+#else
 	opt = getopt32(argv, "a:ludp:", &opt_a, &opt_p);
 #endif
+#endif
 //SHA512_PASSWD
 	//argc -= optind;
-	argv += optind;
-
-	myuid = getuid();
-	/* -l, -u, -d require root priv and username argument */
-	if ((opt & OPT_lud) && (myuid != 0 || !argv[0]))
-		bb_show_usage();
-
-	/* Will complain and die if username not found */
-	myname = xstrdup(xuid2uname(myuid));
-	name = argv[0] ? argv[0] : myname;
+#ifdef SHA512_PASSWD
+	if(opt & OPT_noUpdate){
+		myuid = getuid();
+		//require root privilege
+		if (myuid != 0) bb_show_usage();
 
-	pw = xgetpwnam(name);
-	if (myuid != 0 && pw->pw_uid != myuid) {
-		/* LOGMODE_BOTH */
-		bb_error_msg_and_die("%s can't change password for %s", myname, name);
+		newp = hash_password(opt_a, opt_p, opt_s);
+		printf("%s\n", newp);
 	}
+	else
+#endif
+	{
+		argv += optind;
+
+		myuid = getuid();
+		/* -l, -u, -d require root priv and username argument */
+		if ((opt & OPT_lud) && (myuid != 0 || !argv[0]))
+			bb_show_usage();
+
+		/* Will complain and die if username not found */
+		myname = xstrdup(xuid2uname(myuid));
+		name = argv[0] ? argv[0] : myname;
+
+		pw = xgetpwnam(name);
+		if (myuid != 0 && pw->pw_uid != myuid) {
+			/* LOGMODE_BOTH */
+			bb_error_msg_and_die("%s can't change password for %s", myname, name);
+		}
 
 #if ENABLE_FEATURE_SHADOWPASSWDS
-	{
-		/* getspnam_r may return 0 yet set result to NULL.
-		 * At least glibc 2.4 does this. Be extra paranoid here. */
-		struct spwd *result = NULL;
-		errno = 0;
-		if (getspnam_r(pw->pw_name, &spw, buffer, sizeof(buffer), &result) != 0
-		 || !result /* no error, but no record found either */
-		 || strcmp(result->sp_namp, pw->pw_name) != 0 /* paranoia */
-		) {
-			if (errno != ENOENT) {
-				/* LOGMODE_BOTH */
-				bb_perror_msg("no record of %s in %s, using %s",
-					name, bb_path_shadow_file,
-					bb_path_passwd_file);
+		{
+			/* getspnam_r may return 0 yet set result to NULL.
+			 * At least glibc 2.4 does this. Be extra paranoid here. */
+			struct spwd *result = NULL;
+			errno = 0;
+			if (getspnam_r(pw->pw_name, &spw, buffer, sizeof(buffer), &result) != 0
+			 || !result /* no error, but no record found either */
+			 || strcmp(result->sp_namp, pw->pw_name) != 0 /* paranoia */
+			) {
+				if (errno != ENOENT) {
+					/* LOGMODE_BOTH */
+					bb_perror_msg("no record of %s in %s, using %s",
+						name, bb_path_shadow_file,
+						bb_path_passwd_file);
+				}
+				/* else: /etc/shadow does not exist,
+				 * apparently we are on a shadow-less system,
+				 * no surprise there */
+			} else {
+				pw->pw_passwd = result->sp_pwdp;
 			}
-			/* else: /etc/shadow does not exist,
-			 * apparently we are on a shadow-less system,
-			 * no surprise there */
-		} else {
-			pw->pw_passwd = result->sp_pwdp;
 		}
-	}
 #endif
 
-	/* Decide what the new password will be */
-	newp = NULL;
-	c = pw->pw_passwd[0] - '!';
-	if (!(opt & OPT_lud)) {
-		if (myuid != 0 && !c) { /* passwd starts with '!' */
-			/* LOGMODE_BOTH */
-			bb_error_msg_and_die("can't change "
-					"locked password for %s", name);
-		}
-		printf("Changing password for %s\n", name);
-//SHA512_PASSWD
+		/* Decide what the new password will be */
+		newp = NULL;
+		c = pw->pw_passwd[0] - '!';
+		if (!(opt & OPT_lud)) {
+			if (myuid != 0 && !c) { /* passwd starts with '!' */
+				/* LOGMODE_BOTH */
+				bb_error_msg_and_die("can't change "
+						"locked password for %s", name);
+			}
+			printf("Changing password for %s\n", name);
+	//SHA512_PASSWD
 #if 0
-		newp = new_password(pw, myuid, opt_a);
+			newp = new_password(pw, myuid, opt_a);
 #else
-		newp = new_password(pw, myuid, opt_a, opt_p);
+			newp = new_password(pw, myuid, opt_a, opt_p);
 #endif
-//SHA512_PASSWD
-		if (!newp) {
-			logmode = LOGMODE_STDIO;
-			bb_error_msg_and_die("password for %s is unchanged", name);
+	//SHA512_PASSWD
+			if (!newp) {
+				logmode = LOGMODE_STDIO;
+				bb_error_msg_and_die("password for %s is unchanged", name);
+			}
+		} else if (opt & OPT_lock) {
+			if (!c)
+				goto skip; /* passwd starts with '!' */
+			newp = xasprintf("!%s", pw->pw_passwd);
+		} else if (opt & OPT_unlock) {
+			if (c)
+				goto skip; /* not '!' */
+			/* pw->pw_passwd points to static storage,
+			 * strdup'ing to avoid nasty surprizes */
+			newp = xstrdup(&pw->pw_passwd[1]);
+		} else if (opt & OPT_delete) {
+			newp = (char*)"";
 		}
-	} else if (opt & OPT_lock) {
-		if (!c)
-			goto skip; /* passwd starts with '!' */
-		newp = xasprintf("!%s", pw->pw_passwd);
-	} else if (opt & OPT_unlock) {
-		if (c)
-			goto skip; /* not '!' */
-		/* pw->pw_passwd points to static storage,
-		 * strdup'ing to avoid nasty surprizes */
-		newp = xstrdup(&pw->pw_passwd[1]);
-	} else if (opt & OPT_delete) {
-		newp = (char*)"";
-	}
 
-	rlimit_fsize.rlim_cur = rlimit_fsize.rlim_max = 512L * 30000;
-	setrlimit(RLIMIT_FSIZE, &rlimit_fsize);
-	bb_signals(0
-		+ (1 << SIGHUP)
-		+ (1 << SIGINT)
-		+ (1 << SIGQUIT)
-		, SIG_IGN);
-	umask(077);
-	xsetuid(0);
+		rlimit_fsize.rlim_cur = rlimit_fsize.rlim_max = 512L * 30000;
+		setrlimit(RLIMIT_FSIZE, &rlimit_fsize);
+		bb_signals(0
+			+ (1 << SIGHUP)
+			+ (1 << SIGINT)
+			+ (1 << SIGQUIT)
+			, SIG_IGN);
+		umask(077);
+		xsetuid(0);
 
 #if ENABLE_FEATURE_SHADOWPASSWDS
-	filename = bb_path_shadow_file;
-	rc = update_passwd(bb_path_shadow_file, name, newp, NULL);
-	if (rc > 0)
-		/* password in /etc/shadow was updated */
-		newp = (char*) "x";
-	if (rc >= 0)
-		/* 0 = /etc/shadow missing (not an error), >0 = passwd changed in /etc/shadow */
+		filename = bb_path_shadow_file;
+		rc = update_passwd(bb_path_shadow_file, name, newp, NULL);
+		if (rc > 0)
+			/* password in /etc/shadow was updated */
+			newp = (char*) "x";
+		if (rc >= 0)
+			/* 0 = /etc/shadow missing (not an error), >0 = passwd changed in /etc/shadow */
 #endif
-	{
-		filename = bb_path_passwd_file;
-		rc = update_passwd(bb_path_passwd_file, name, newp, NULL);
-	}
-	/* LOGMODE_BOTH */
-	if (rc < 0)
-		bb_error_msg_and_die("can't update password file %s", filename);
-	bb_info_msg("Password for %s changed by %s", name, myname);
+		{
+			filename = bb_path_passwd_file;
+			rc = update_passwd(bb_path_passwd_file, name, newp, NULL);
+		}
+		/* LOGMODE_BOTH */
+		if (rc < 0)
+			bb_error_msg_and_die("can't update password file %s", filename);
+		bb_info_msg("Password for %s changed by %s", name, myname);
 
-	/*if (ENABLE_FEATURE_CLEAN_UP) free(newp); - can't, it may be non-malloced */
+		/*if (ENABLE_FEATURE_CLEAN_UP) free(newp); - can't, it may be non-malloced */
+	}
  skip:
 	if (!newp) {
 		bb_error_msg_and_die("password for %s is already %slocked",
