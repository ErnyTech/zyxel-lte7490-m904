diff -urN mosquitto-1.6.7_orig/client/client_shared.c mosquitto-1.6.7/client/client_shared.c
--- mosquitto-1.6.7_orig/client/client_shared.c	2020-01-03 18:57:35.397290894 +0800
+++ mosquitto-1.6.7/client/client_shared.c	2020-01-03 17:51:08.542856000 +0800
@@ -144,41 +144,111 @@
 void client_config_cleanup(struct mosq_config *cfg)
 {
 	int i;
+	
+	if(cfg->id)
 	free(cfg->id);
+
+	if(cfg->id_prefix)
 	free(cfg->id_prefix);
+
+	if(cfg->host)
 	free(cfg->host);
+
+	if(cfg->file_input)
 	free(cfg->file_input);
+
+	if(cfg->message)
 	free(cfg->message);
+
+	if(cfg->topic)
 	free(cfg->topic);
+
+	if(cfg->bind_address)
 	free(cfg->bind_address);
+
+	if(cfg->username)
 	free(cfg->username);
+
+	if(cfg->password)
 	free(cfg->password);
+
+	if(cfg->will_topic)
 	free(cfg->will_topic);
+
+	if(cfg->will_payload)
 	free(cfg->will_payload);
+
+	if(cfg->format)
 	free(cfg->format);
+
+	if(cfg->response_topic)
 	free(cfg->response_topic);
+
 #ifdef WITH_TLS
+	if(cfg->cafile)
 	free(cfg->cafile);
+
+	if(cfg->capath)
 	free(cfg->capath);
+
+	if(cfg->certfile)
 	free(cfg->certfile);
+
+	if(cfg->keyfile)
 	free(cfg->keyfile);
+
+	if(cfg->ciphers)
 	free(cfg->ciphers);
+
+	if(cfg->tls_alpn)
 	free(cfg->tls_alpn);
+
+	if(cfg->tls_version)
 	free(cfg->tls_version);
+
+	if(cfg->tls_engine)
 	free(cfg->tls_engine);
+
+	if(cfg->tls_engine_kpass_sha1)
 	free(cfg->tls_engine_kpass_sha1);
+
+	if(cfg->keyform)
 	free(cfg->keyform);
+
 #  ifdef FINAL_WITH_TLS_PSK
+	if(cfg->psk)
 	free(cfg->psk);
+
+	if(cfg->psk_identity)
 	free(cfg->psk_identity);
+
 #  endif
 #endif
 	if(cfg->topics){
 		for(i=0; i<cfg->topic_count; i++){
-			free(cfg->topics[i]);
+			if(cfg->topics[i])
+				free(cfg->topics[i]);
 		}
 		free(cfg->topics);
 	}
+	//#ifdef ZYXEL_MQTT_PUBLISHER
+	#if 1
+	if(cfg->messages){
+		for(i=0; i<cfg->message_count; i++){
+			if(cfg->messages[i])
+				free(cfg->messages[i]);
+		}
+		free(cfg->messages);
+	}
+	
+	if(cfg->files){
+		for(i=0; i<cfg->file_count; i++){
+			if(cfg->files[i])
+				free(cfg->files[i]);
+		}
+		free(cfg->files);
+	}
+	#endif
 	if(cfg->filter_outs){
 		for(i=0; i<cfg->filter_out_count; i++){
 			free(cfg->filter_outs[i]);
@@ -410,7 +480,12 @@
 		fprintf(stderr, "Error: Malformed UTF-8 in %s argument.\n\n", arg);
 		return 1;
 	}
+//#ifdef ZYXEL_MQTT_PUBLISHER
+#if 1
+	if(/*type == CLIENT_PUB || */type == CLIENT_RR){//mark type == CLIENT_PUB
+#else
 	if(type == CLIENT_PUB || type == CLIENT_RR){
+#endif
 		if(mosquitto_pub_topic_check(topic) == MOSQ_ERR_INVAL){
 			fprintf(stderr, "Error: Invalid publish topic '%s', does it contain '+' or '#'?\n", topic);
 			return 1;
@@ -438,6 +513,102 @@
 	return 0;
 }
 
+//#ifdef ZYXEL_MQTT_PUBLISHER
+#if 1
+int cfg_add_message(struct mosq_config *cfg, int type, char *message, const char *arg)
+{
+	
+	cfg->message_count++;
+	cfg->messages = realloc(cfg->messages, cfg->message_count*sizeof(char *));
+	if(!cfg->messages){
+		printf("Error: Out of memory.\n");
+		return 1;
+	}
+	cfg->messages[cfg->message_count-1] = strdup(message);
+	cfg->messages[cfg->message_count-1][strlen(message)] = '\0';
+	
+	return 0;
+}
+
+int cfg_add_file(struct mosq_config *cfg, int type, char *file, const char *arg)
+{
+	long pos, rlen;
+	FILE *fptr = NULL;
+	int i;
+	
+	cfg->message_count++;
+	cfg->file_count++;
+	cfg->files = realloc(cfg->files, cfg->file_count*sizeof(char *));
+	if(!cfg->files){
+		printf("Error: Out of memory.\n");
+		return 1;
+	}
+	cfg->files[cfg->file_count-1] = strdup(file);
+	
+	#if 0
+	printf("%s() cfg->file_count=%d\n", __FUNCTION__, cfg->file_count);
+	printf("%s() cfg->files[cfg->file_count-1]=%s\n", __FUNCTION__, cfg->files[cfg->file_count-1]);
+	#endif
+	
+	fptr = fopen(cfg->files[cfg->file_count-1], "rb");
+	if(!fptr){
+		printf("Error: Unable to open file \"%s\".\n", cfg->files[cfg->file_count-1]);
+		return 1;
+	}
+	cfg->pub_mode = MSGMODE_FILE;
+	fseek(fptr, 0, SEEK_END);
+	cfg->msglen = ftell(fptr);
+	//printf("%s()  cfg->msglen=%d\n", __FUNCTION__, cfg->msglen);
+	if(cfg->msglen > 268435455){
+		fclose(fptr);
+		err_printf(&cfg, "Error: File \"%s\" is too large (>268,435,455 bytes).\n", cfg->files[cfg->file_count-1]);
+		return 1;
+	}else if(cfg->msglen == 0){
+		fclose(fptr);
+		err_printf(&cfg, "Error: File \"%s\" is empty.\n", cfg->files[cfg->file_count-1]);
+		return 1;
+	}else if(cfg->msglen < 0){
+		fclose(fptr);
+		err_printf(&cfg, "Error: Unable to determine size of file \"%s\".\n", cfg->files[cfg->file_count-1]);
+		return 1;
+	}
+	fseek(fptr, 0, SEEK_SET);
+	
+	
+	cfg->messages = realloc(cfg->messages, cfg->message_count*sizeof(char *));
+	
+	if(!cfg->messages){
+		printf("Error: Out of memory.\n");
+		return 1;
+	}
+
+	
+	cfg->messages[cfg->message_count-1] = malloc(cfg->msglen);
+	if(!cfg->messages[cfg->message_count-1]){
+		
+		fclose(fptr);
+		err_printf(&cfg, "Error: Out of memory.\n");
+		return 1;
+	}
+	
+	pos = 0;
+	
+	while(pos < cfg->msglen){
+		rlen = fread(&(cfg->messages[cfg->message_count-1][pos]), sizeof(char), cfg->msglen-pos, fptr);
+		#if 0
+		for(i=0;i<cfg->msglen;i++)
+			printf("%s() (cfg->messages[cfg->message_count-1][i])=%c\n", __FUNCTION__, (cfg->messages[cfg->message_count-1][i]));
+		#endif
+		pos += rlen;
+	}
+	cfg->messages[cfg->message_count-1][cfg->msglen] = '\0';
+	//printf("%s()  cfg->messages[cfg->message_count-1]=%s\n", __FUNCTION__, cfg->messages[cfg->message_count-1]);
+	fclose(fptr);
+	
+	return 0;
+}
+#endif//ZYXEL_MQTT_PUBLISHER
+
 /* Process a tokenised single line from a file or set of real argc/argv */
 int client_config_line_proc(struct mosq_config *cfg, int pub_or_sub, int argc, char *argv[])
 {
@@ -535,19 +706,26 @@
 			if(pub_or_sub == CLIENT_SUB){
 				goto unknown_option;
 			}
+			/*
 			if(cfg->pub_mode != MSGMODE_NONE){
 				fprintf(stderr, "Error: Only one type of message can be sent at once.\n\n");
 				return 1;
-			}else if(i==argc-1){
+			}else */if(i==argc-1){
 				fprintf(stderr, "Error: -f argument given but no file specified.\n\n");
 				return 1;
 			}else{
 				cfg->pub_mode = MSGMODE_FILE;
+				//#ifndef ZYXEL_MQTT_PUBLISHER
+				#if 0
 				cfg->file_input = strdup(argv[i+1]);
 				if(!cfg->file_input){
 					err_printf(cfg, "Error: Out of memory.\n");
 					return 1;
 				}
+				#else
+				if(cfg_add_file(cfg, pub_or_sub, argv[i + 1], "-f"))
+					return 1;
+				#endif
 			}
 			i++;
 		}else if(!strcmp(argv[i], "-F")){
@@ -701,16 +879,33 @@
 			if(pub_or_sub == CLIENT_SUB){
 				goto unknown_option;
 			}
+//#ifdef ZYXEL_MQTT_PUBLISHER
+#if 1
+			/* 
+			if(cfg->pub_mode != MSGMODE_NONE){
+				fprintf(stderr, "Error: Only one type of message can be sent at once.\n\n");
+				return 1;
+			}else */if(i==argc-1){
+#else
 			if(cfg->pub_mode != MSGMODE_NONE){
 				fprintf(stderr, "Error: Only one type of message can be sent at once.\n\n");
 				return 1;
 			}else if(i==argc-1){
+#endif
 				fprintf(stderr, "Error: -m argument given but no message specified.\n\n");
 				return 1;
 			}else{
+//#ifdef ZYXEL_MQTT_PUBLISHER
+#if 1
+				cfg->pub_mode = MSGMODE_CMD;
+				//printf("%s() argv[i + 1]=%s\n", __FUNCTION__, argv[i + 1]);
+				if(cfg_add_message(cfg, pub_or_sub, argv[i + 1], "-m"))
+					return 1;
+#else
 				cfg->message = strdup(argv[i+1]);
 				cfg->msglen = strlen(cfg->message);
 				cfg->pub_mode = MSGMODE_CMD;
+#endif
 			}
 			i++;
 		}else if(!strcmp(argv[i], "-M")){
diff -urN mosquitto-1.6.7_orig/client/client_shared.h mosquitto-1.6.7/client/client_shared.h
--- mosquitto-1.6.7_orig/client/client_shared.h	2020-01-03 18:57:35.397290894 +0800
+++ mosquitto-1.6.7/client/client_shared.h	2020-01-03 15:10:02.822125600 +0800
@@ -116,6 +116,13 @@
 	mosquitto_property *will_props;
 	bool have_topic_alias; /* pub */
 	char *response_topic; /* rr */
+//#ifdef ZYXEL_MQTT_PUBLISHER
+#if 1
+	char **messages; /* pub */
+	int message_count; /* pub */
+	char **files; /* pub */
+	int file_count; /* pub */
+#endif
 };
 
 int client_config_load(struct mosq_config *config, int pub_or_sub, int argc, char *argv[]);
diff -urN mosquitto-1.6.7_orig/client/pub_client.c mosquitto-1.6.7/client/pub_client.c
--- mosquitto-1.6.7_orig/client/pub_client.c	2020-01-03 18:57:35.397290894 +0800
+++ mosquitto-1.6.7/client/pub_client.c	2020-01-03 17:52:57.517000100 +0800
@@ -123,7 +123,10 @@
 void my_connect_callback(struct mosquitto *mosq, void *obj, int result, int flags, const mosquitto_property *properties)
 {
 	int rc = MOSQ_ERR_SUCCESS;
-
+//#ifdef ZYXEL_MQTT_PUBLISHER
+#if 1
+	int i;
+#endif
 	UNUSED(obj);
 	UNUSED(flags);
 	UNUSED(properties);
@@ -133,7 +136,16 @@
 			case MSGMODE_CMD:
 			case MSGMODE_FILE:
 			case MSGMODE_STDIN_FILE:
-				rc = my_publish(mosq, &mid_sent, cfg.topic, cfg.msglen, cfg.message, cfg.qos, cfg.retain);
+				//#ifdef ZYXEL_MQTT_PUBLISHER
+				#if 1
+				//printf("%s() cfg.topic_count=%d\n", __FUNCTION__, cfg.topic_count);
+				for(i=0;i<cfg.topic_count;i++){
+					//printf("%s() cfg.messages[i]=%s\n", __FUNCTION__, cfg.messages[i]);
+					rc = my_publish(mosq, &mid_sent, cfg.topics[i], strlen(cfg.messages[i]), cfg.messages[i], cfg.qos, cfg.retain);
+				}
+				#else
+				rc = my_publish(mosq, &mid_sent, cfg.topic, cfg.msglen, cfg.message, cfg.qos, cfg.retain);	
+				#endif
 				break;
 			case MSGMODE_NULL:
 				rc = my_publish(mosq, &mid_sent, cfg.topic, 0, NULL, cfg.qos, cfg.retain);
@@ -467,7 +479,7 @@
 		goto cleanup;
 	}
 #endif
-
+		
 	if(cfg.pub_mode == MSGMODE_STDIN_FILE){
 		if(load_stdin()){
 			err_printf(&cfg, "Error loading input from stdin.\n");
@@ -479,13 +491,14 @@
 			goto cleanup;
 		}
 	}
-
+//#ifndef ZYXEL_MQTT_PUBLISHER
+#if 0
 	if(!cfg.topic || cfg.pub_mode == MSGMODE_NONE){
 		fprintf(stderr, "Error: Both topic and message must be supplied.\n");
 		print_usage();
 		goto cleanup;
 	}
-
+#endif
 
 	if(client_id_generate(&cfg)){
 		goto cleanup;
@@ -521,15 +534,17 @@
 
 	rc = pub_shared_loop(mosq);
 
+//#ifndef ZYXEL_MQTT_PUBLISHER
+#if 1
 	if(cfg.message && cfg.pub_mode == MSGMODE_FILE){
 		free(cfg.message);
 		cfg.message = NULL;
 	}
+#endif
 	mosquitto_destroy(mosq);
 	mosquitto_lib_cleanup();
 	client_config_cleanup(&cfg);
 	pub_shared_cleanup();
-
 	if(rc){
 		err_printf(&cfg, "Error: %s\n", mosquitto_strerror(rc));
 	}
