--- /dev/null
+++ b/agent/mibgroup/ZYXEL-PRESTIGE-MIB/cellinfMIB.c
@@ -0,0 +1,620 @@
+/*
+ * Note: this file originally auto-generated by mib2c
+ * using mib2c.scalar.conf
+ */
+
+#include <stdio.h>
+#include <net-snmp/net-snmp-config.h>
+#include <net-snmp/net-snmp-includes.h>
+#include <net-snmp/agent/net-snmp-agent-includes.h>
+#include "zcfg_common.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "cellinfMIB.h"
+
+
+#define STRMAX 1024
+
+void initialize_table_sccTable(void);
+
+/** Initializes the cellinfMIB module */
+void
+init_cellinfMIB(void)
+{
+    const oid supportedAccessTechnologies_oid[] = { 1,3,6,1,4,1,890,5,1 };
+    const oid currentAccessTechnology_oid[] = { 1,3,6,1,4,1,890,5,2 };
+    const oid preferredAccessTechnology_oid[] = { 1,3,6,1,4,1,890,5,3 };
+
+  DEBUGMSGTL(("cellinfMIB", "Initializing\n"));
+
+    netsnmp_register_scalar(
+        netsnmp_create_handler_registration("supportedAccessTechnologies", handle_supportedAccessTechnologies,
+                               supportedAccessTechnologies_oid, OID_LENGTH(supportedAccessTechnologies_oid),
+                               HANDLER_CAN_RONLY
+        ));
+    netsnmp_register_scalar(
+        netsnmp_create_handler_registration("currentAccessTechnology", handle_currentAccessTechnology,
+                               currentAccessTechnology_oid, OID_LENGTH(currentAccessTechnology_oid),
+                               HANDLER_CAN_RONLY
+        ));
+    netsnmp_register_scalar(
+        netsnmp_create_handler_registration("preferredAccessTechnology", handle_preferredAccessTechnology,
+                               preferredAccessTechnology_oid, OID_LENGTH(preferredAccessTechnology_oid),
+                               HANDLER_CAN_RWRITE
+        ));
+
+    /* here we initialize all the tables we're planning on supporting */
+    initialize_table_sccTable();
+}
+
+int
+handle_supportedAccessTechnologies(netsnmp_mib_handler *handler,
+                          netsnmp_handler_registration *reginfo,
+                          netsnmp_agent_request_info   *reqinfo,
+                          netsnmp_request_info         *requests)
+{
+    objIndex_t intfIid;
+    zcfgRet_t ret = ZCFG_SUCCESS;
+    rdm_CellIntf_t *cellIntfObj = NULL;
+
+    /* We are never called for a GETNEXT if it's registered as a
+       "instance", as it's "magically" handled for us.  */
+
+    /* a instance handler also only hands us one request at a time, so
+       we don't need to loop over a list of requests; we'll only get one. */
+
+    switch(reqinfo->mode) {
+
+        case MODE_GET:
+            // handleOfGetParameter cannot be used because it can only be used on an object, not on an index_object.
+            IID_INIT(intfIid);
+
+            intfIid.level=1;
+            intfIid.idx[0]=1;
+
+            ret = zcfgFeObjStructGet(RDM_OID_CELL_INTF, &intfIid, (void **)&cellIntfObj);
+            if(ret != ZCFG_SUCCESS) {
+                snmp_log(LOG_ERR, "%s: Get CELL_INTF Fail, ret = %d\n", __FUNCTION__, ret);
+                return SNMP_ERR_NOACCESS;
+            }
+
+            snmp_set_var_typed_value(requests->requestvb, ASN_OCTET_STR,
+                                     cellIntfObj->SupportedAccessTechnologies,
+                                     strlen(cellIntfObj->SupportedAccessTechnologies));
+
+            zcfgFeObjStructFree(cellIntfObj);
+            break;
+
+
+        default:
+            /* we should never get here, so this is a really bad error */
+            snmp_log(LOG_ERR, "unknown mode (%d) in handle_supportedAccessTechnologies\n", reqinfo->mode );
+            return SNMP_ERR_GENERR;
+    }
+
+    return SNMP_ERR_NOERROR;
+}
+int
+handle_currentAccessTechnology(netsnmp_mib_handler *handler,
+                          netsnmp_handler_registration *reginfo,
+                          netsnmp_agent_request_info   *reqinfo,
+                          netsnmp_request_info         *requests)
+{
+    objIndex_t intfIid;
+    zcfgRet_t ret = ZCFG_SUCCESS;
+    rdm_CellIntf_t *cellIntfObj = NULL;
+
+    /* We are never called for a GETNEXT if it's registered as a
+       "instance", as it's "magically" handled for us.  */
+
+    /* a instance handler also only hands us one request at a time, so
+       we don't need to loop over a list of requests; we'll only get one. */
+
+    switch(reqinfo->mode) {
+
+        case MODE_GET:
+            // handleOfGetParameter cannot be used because it can only be used on an object, not on an index_object.
+            IID_INIT(intfIid);
+
+            intfIid.level=1;
+            intfIid.idx[0]=1;
+
+            ret = zcfgFeObjStructGet(RDM_OID_CELL_INTF, &intfIid, (void **)&cellIntfObj);
+            if(ret != ZCFG_SUCCESS) {
+                snmp_log(LOG_ERR, "%s: Get CELL_INTF Fail, ret = %d\n", __FUNCTION__, ret);
+                return SNMP_ERR_NOACCESS;
+            }
+
+            snmp_set_var_typed_value(requests->requestvb, ASN_OCTET_STR,
+                                     cellIntfObj->CurrentAccessTechnology,
+                                     strlen(cellIntfObj->CurrentAccessTechnology));
+
+            zcfgFeObjStructFree(cellIntfObj);
+            break;
+
+
+        default:
+            /* we should never get here, so this is a really bad error */
+            snmp_log(LOG_ERR, "unknown mode (%d) in handle_currentAccessTechnology\n", reqinfo->mode );
+            return SNMP_ERR_GENERR;
+    }
+
+    return SNMP_ERR_NOERROR;
+}
+int
+handle_preferredAccessTechnology(netsnmp_mib_handler *handler,
+                          netsnmp_handler_registration *reginfo,
+                          netsnmp_agent_request_info   *reqinfo,
+                          netsnmp_request_info         *requests)
+{
+
+    char val[STRMAX];
+    objIndex_t intfIid;
+    rdm_CellIntf_t *cellIntfObj = NULL;
+    int ret = SNMP_ERR_NOERROR;
+
+    /* We are never called for a GETNEXT if it's registered as a
+       "instance", as it's "magically" handled for us.  */
+
+    /* a instance handler also only hands us one request at a time, so
+       we don't need to loop over a list of requests; we'll only get one. */
+
+    switch(reqinfo->mode) {
+
+        case MODE_GET:
+            // handleOfGetParameter cannot be used because it can only be used on an object, not on an index_object.
+            IID_INIT(intfIid);
+
+            intfIid.level=1;
+            intfIid.idx[0]=1;
+
+            ret = zcfgFeObjStructGet(RDM_OID_CELL_INTF, &intfIid, (void **)&cellIntfObj);
+            if(ret != ZCFG_SUCCESS) {
+                snmp_log(LOG_ERR, "%s: Get CELL_INTF Fail, ret = %d\n", __FUNCTION__, ret);
+                return SNMP_ERR_NOACCESS;
+            }
+
+            snmp_set_var_typed_value(requests->requestvb, ASN_OCTET_STR,
+                                     cellIntfObj->PreferredAccessTechnology,
+                                     strlen(cellIntfObj->PreferredAccessTechnology));
+
+            zcfgFeObjStructFree(cellIntfObj);
+            break;
+
+        /*
+         * SET REQUEST
+         *
+         * multiple states in the transaction.  See:
+         * http://www.net-snmp.org/tutorial-5/toolkit/mib_module/set-actions.jpg
+         */
+        case MODE_SET_RESERVE1:
+                /* or you could use netsnmp_check_vb_type_and_size instead */
+            ret = netsnmp_check_vb_type(requests->requestvb, ASN_OCTET_STR);
+            if ( ret != SNMP_ERR_NOERROR ) {
+                netsnmp_set_request_error(reqinfo, requests, ret );
+            }
+            break;
+
+        case MODE_SET_RESERVE2:
+            /* XXX malloc "undo" storage buffer */
+            break;
+
+        case MODE_SET_FREE:
+            /* XXX: free resources allocated in RESERVE1 and/or
+               RESERVE2.  Something failed somewhere, and the states
+               below won't be called. */
+            break;
+
+        case MODE_SET_ACTION:
+            // handleOfSetParameter cannot be used because it can only be used on an object, not on an index_object.
+            if(parseVal2Str(val, STRMAX, requests->requestvb) <= 0){
+                snmp_log(LOG_ERR, "Error to parse variable to string\n");
+                ret = SNMP_ERR_GENERR;
+            }
+            else {
+                IID_INIT(intfIid);
+
+                intfIid.level=1;
+                intfIid.idx[0]=1;
+
+                ret = zcfgFeObjStructGet(RDM_OID_CELL_INTF, &intfIid, (void **)&cellIntfObj);
+                if(ret != ZCFG_SUCCESS) {
+                    snmp_log(LOG_ERR, "%s: Get CELL_INTF Fail, ret = %d\n", __FUNCTION__, ret);
+                    ret = SNMP_ERR_NOACCESS;
+                }
+                else {
+                    strncpy(cellIntfObj->PreferredAccessTechnology, val, sizeof(cellIntfObj->PreferredAccessTechnology));
+                    if((ret = zcfgFeObjStructSet(RDM_OID_CELL_INTF, &intfIid, (void *)cellIntfObj, NULL)) != ZCFG_SUCCESS) {
+                        snmp_log(LOG_ERR, "%s: set CELL_INTF Fail, ret = %d\n", __FUNCTION__, ret);
+                        ret = SNMP_ERR_NOACCESS;
+                    }
+                    zcfgFeObjStructFree(cellIntfObj);
+                }
+            }
+
+            if (ret) {
+                netsnmp_set_request_error(reqinfo, requests, ret);
+            }
+            break;
+
+        case MODE_SET_COMMIT:
+            /* XXX: delete temporary storage */
+            break;
+
+        case MODE_SET_UNDO:
+            /* XXX: UNDO and return to previous value for the object */
+            break;
+
+        default:
+            /* we should never get here, so this is a really bad error */
+            snmp_log(LOG_ERR, "unknown mode (%d) in handle_preferredAccessTechnology\n", reqinfo->mode );
+            return SNMP_ERR_GENERR;
+    }
+
+    return SNMP_ERR_NOERROR;
+}
+
+/** Initialize the sccTable table by defining its contents and how it's structured */
+void
+initialize_table_sccTable(void)
+{
+
+    const oid sccTable_oid[] = {1,3,6,1,4,1,890,5,4,1};
+    const size_t sccTable_oid_len   = OID_LENGTH(sccTable_oid);
+    netsnmp_handler_registration    *reg;
+    netsnmp_iterator_info           *iinfo;
+    netsnmp_table_registration_info *table_info;
+
+    DEBUGMSGTL(("cellinfMIB:init", "initializing table sccTable\n"));
+
+    reg = netsnmp_create_handler_registration(
+              "sccTable",     sccTable_handler,
+              sccTable_oid, sccTable_oid_len,
+              HANDLER_CAN_RONLY
+              );
+
+    table_info = SNMP_MALLOC_TYPEDEF( netsnmp_table_registration_info );
+    netsnmp_table_helper_add_indexes(table_info,
+                           ASN_INTEGER,  /* index: sccIndex */
+                           0);
+    table_info->min_column = COLUMN_SCCINDEX;
+    table_info->max_column = COLUMN_SCCUL_RFCN;
+
+    iinfo = SNMP_MALLOC_TYPEDEF( netsnmp_iterator_info );
+    iinfo->get_first_data_point = sccTable_get_first_data_point;
+    iinfo->get_next_data_point  = sccTable_get_next_data_point;
+    iinfo->table_reginfo        = table_info;
+
+    netsnmp_register_table_iterator( reg, iinfo );
+    netsnmp_inject_handler_before( reg,
+        netsnmp_get_cache_handler(SCCTABLE_TIMEOUT,
+                                  sccTable_load, sccTable_free,
+                                  sccTable_oid, sccTable_oid_len),
+            TABLE_ITERATOR_NAME);
+
+    /* Initialise the contents of the table here */
+}
+
+    /* Typical data structure for a row entry */
+struct sccTable_entry {
+    /* Index values */
+    long sccIndex;
+
+    /* Column values */
+    long sccEnable;
+    long sccPhysicalCellID;
+    u_long sccRFCN;
+    char sccBand[1024];
+    size_t sccBand_len;
+    u_long sccBandNum;
+    long sccRSSI;
+    long sccRSRP;
+    long sccRSRQ;
+    long sccSINR;
+    long sccCA_STATE;
+    long sccDL_BW;
+    u_long sccUL_CONFIGURED;
+    long sccUL_BW;
+    u_long sccUL_RFCN;
+
+    /* Illustrate using a simple linked list */
+    int   valid;
+    struct sccTable_entry *next;
+};
+
+struct sccTable_entry  *sccTable_head;
+
+/* create a new row in the (unsorted) table */
+struct sccTable_entry *
+sccTable_createEntry(
+                 long  sccIndex
+                ) {
+    struct sccTable_entry *entry;
+
+    entry = SNMP_MALLOC_TYPEDEF(struct sccTable_entry);
+    if (!entry)
+        return NULL;
+
+    entry->sccIndex = sccIndex;
+    entry->next = sccTable_head;
+    sccTable_head = entry;
+    return entry;
+}
+
+/* remove a row from the table */
+void
+sccTable_removeEntry( struct sccTable_entry *entry ) {
+    struct sccTable_entry *ptr, *prev;
+
+    if (!entry)
+        return;    /* Nothing to remove */
+
+    for ( ptr  = sccTable_head, prev = NULL;
+          ptr != NULL;
+          prev = ptr, ptr = ptr->next ) {
+        if ( ptr == entry )
+            break;
+    }
+    if ( !ptr )
+        return;    /* Can't find it */
+
+    if ( prev == NULL )
+        sccTable_head = ptr->next;
+    else
+        prev->next = ptr->next;
+
+    SNMP_FREE( entry );   /* XXX - release any other internal resources */
+}
+
+/* Example cache handling - set up linked list from a suitable file */
+int
+sccTable_load( netsnmp_cache *cache, void *vmagic ) {
+
+    struct sccTable_entry *this;
+    char buf[STRMAX];
+
+    objIndex_t intfZySccIid, cellintfIid;
+    rdm_CellIntfZyScc_t *cellIntfZySccObj = NULL;
+
+	IID_INIT(cellintfIid);
+    IID_INIT(intfZySccIid);
+    cellintfIid.level = 1;
+	cellintfIid.idx[0] = 1;
+
+    while(zcfgFeSubInStructGetNext(RDM_OID_CELL_INTF_ZY_SCC, &cellintfIid, &intfZySccIid, (void **)&cellIntfZySccObj) == ZCFG_SUCCESS) {
+        if(cellIntfZySccObj->Enable == true) {
+            this = SNMP_MALLOC_TYPEDEF( struct sccTable_entry );
+            this->sccIndex = intfZySccIid.idx[intfZySccIid.level - 1];
+            this->sccEnable = cellIntfZySccObj->Enable;
+            this->sccPhysicalCellID = cellIntfZySccObj->PhysicalCellID;
+            this->sccRFCN = cellIntfZySccObj->RFCN;
+            strncpy(this->sccBand, cellIntfZySccObj->Band, strlen(cellIntfZySccObj->Band));
+            this->sccBand_len = strlen(cellIntfZySccObj->Band);
+            this->sccBandNum = cellIntfZySccObj->BandNum;
+            this->sccRSSI = cellIntfZySccObj->RSSI;
+            this->sccRSRP = cellIntfZySccObj->RSRP;
+            this->sccRSRQ = cellIntfZySccObj->RSRQ;
+            this->sccSINR = cellIntfZySccObj->SINR;
+            this->sccCA_STATE = cellIntfZySccObj->CA_STATE;
+            this->sccDL_BW = cellIntfZySccObj->DL_BW;
+            this->sccUL_CONFIGURED = cellIntfZySccObj->UL_CONFIGURED;
+            this->sccUL_BW = cellIntfZySccObj->UL_BW;
+            this->sccUL_RFCN = cellIntfZySccObj->UL_RFCN;
+
+            this->next = sccTable_head;
+            sccTable_head = this;    /* Iterate helper is fine with unordered lists! */
+        }
+        zcfgFeObjStructFree(cellIntfZySccObj);
+    }
+
+    return 0;  /* OK */
+}
+
+void
+sccTable_free( netsnmp_cache *cache, void *vmagic ) {
+    struct sccTable_entry *this, *that;
+
+    for ( this = sccTable_head; this; this=that ) {
+        that = this->next;
+        SNMP_FREE( this );   /* XXX - release any other internal resources */
+    }
+    sccTable_head = NULL;
+}
+
+/* Example iterator hook routines - using 'get_next' to do most of the work */
+netsnmp_variable_list *
+sccTable_get_first_data_point(void **my_loop_context,
+                          void **my_data_context,
+                          netsnmp_variable_list *put_index_data,
+                          netsnmp_iterator_info *mydata)
+{
+    *my_loop_context = sccTable_head;
+    return sccTable_get_next_data_point(my_loop_context, my_data_context,
+                                    put_index_data,  mydata );
+}
+
+netsnmp_variable_list *
+sccTable_get_next_data_point(void **my_loop_context,
+                          void **my_data_context,
+                          netsnmp_variable_list *put_index_data,
+                          netsnmp_iterator_info *mydata)
+{
+    struct sccTable_entry *entry = (struct sccTable_entry *)*my_loop_context;
+    netsnmp_variable_list *idx = put_index_data;
+
+    if ( entry ) {
+        snmp_set_var_typed_integer( idx, ASN_INTEGER, entry->sccIndex );
+        idx = idx->next_variable;
+        *my_data_context = (void *)entry;
+        *my_loop_context = (void *)entry->next;
+        return put_index_data;
+    } else {
+        return NULL;
+    }
+}
+
+
+/** handles requests for the sccTable table */
+int
+sccTable_handler(
+    netsnmp_mib_handler               *handler,
+    netsnmp_handler_registration      *reginfo,
+    netsnmp_agent_request_info        *reqinfo,
+    netsnmp_request_info              *requests) {
+
+    netsnmp_request_info       *request;
+    netsnmp_table_request_info *table_info;
+    struct sccTable_entry          *table_entry;
+
+    DEBUGMSGTL(("cellinfMIB:handler", "Processing request (%d)\n", reqinfo->mode));
+
+    switch (reqinfo->mode) {
+        /*
+         * Read-support (also covers GetNext requests)
+         */
+    case MODE_GET:
+        for (request=requests; request; request=request->next) {
+            table_entry = (struct sccTable_entry *)
+                              netsnmp_extract_iterator_context(request);
+            table_info  =     netsnmp_extract_table_info(      request);
+
+            switch (table_info->colnum) {
+            case COLUMN_SCCENABLE:
+                if ( !table_entry ) {
+                    netsnmp_set_request_error(reqinfo, request,
+                                              SNMP_NOSUCHINSTANCE);
+                    continue;
+                }
+                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
+                                            table_entry->sccEnable);
+                break;
+            case COLUMN_SCCPHYSICALCELLID:
+                if ( !table_entry ) {
+                    netsnmp_set_request_error(reqinfo, request,
+                                              SNMP_NOSUCHINSTANCE);
+                    continue;
+                }
+                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
+                                            table_entry->sccPhysicalCellID);
+                break;
+            case COLUMN_SCCRFCN:
+                if ( !table_entry ) {
+                    netsnmp_set_request_error(reqinfo, request,
+                                              SNMP_NOSUCHINSTANCE);
+                    continue;
+                }
+                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
+                                            table_entry->sccRFCN);
+                break;
+            case COLUMN_SCCBAND:
+                if ( !table_entry ) {
+                    netsnmp_set_request_error(reqinfo, request,
+                                              SNMP_NOSUCHINSTANCE);
+                    continue;
+                }
+                snmp_set_var_typed_value( request->requestvb, ASN_OCTET_STR,
+                                          table_entry->sccBand,
+                                          table_entry->sccBand_len);
+                break;
+            case COLUMN_SCCBANDNUM:
+                if ( !table_entry ) {
+                    netsnmp_set_request_error(reqinfo, request,
+                                              SNMP_NOSUCHINSTANCE);
+                    continue;
+                }
+                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
+                                            table_entry->sccBandNum);
+                break;
+            case COLUMN_SCCRSSI:
+                if ( !table_entry ) {
+                    netsnmp_set_request_error(reqinfo, request,
+                                              SNMP_NOSUCHINSTANCE);
+                    continue;
+                }
+                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
+                                            table_entry->sccRSSI);
+                break;
+            case COLUMN_SCCRSRP:
+                if ( !table_entry ) {
+                    netsnmp_set_request_error(reqinfo, request,
+                                              SNMP_NOSUCHINSTANCE);
+                    continue;
+                }
+                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
+                                            table_entry->sccRSRP);
+                break;
+            case COLUMN_SCCRSRQ:
+                if ( !table_entry ) {
+                    netsnmp_set_request_error(reqinfo, request,
+                                              SNMP_NOSUCHINSTANCE);
+                    continue;
+                }
+                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
+                                            table_entry->sccRSRQ);
+                break;
+            case COLUMN_SCCSINR:
+                if ( !table_entry ) {
+                    netsnmp_set_request_error(reqinfo, request,
+                                              SNMP_NOSUCHINSTANCE);
+                    continue;
+                }
+                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
+                                            table_entry->sccSINR);
+                break;
+            case COLUMN_SCCCA_STATE:
+                if ( !table_entry ) {
+                    netsnmp_set_request_error(reqinfo, request,
+                                              SNMP_NOSUCHINSTANCE);
+                    continue;
+                }
+                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
+                                            table_entry->sccCA_STATE);
+                break;
+            case COLUMN_SCCDL_BW:
+                if ( !table_entry ) {
+                    netsnmp_set_request_error(reqinfo, request,
+                                              SNMP_NOSUCHINSTANCE);
+                    continue;
+                }
+                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
+                                            table_entry->sccDL_BW);
+                break;
+            case COLUMN_SCCUL_CONFIGURED:
+                if ( !table_entry ) {
+                    netsnmp_set_request_error(reqinfo, request,
+                                              SNMP_NOSUCHINSTANCE);
+                    continue;
+                }
+                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
+                                            table_entry->sccUL_CONFIGURED);
+                break;
+            case COLUMN_SCCUL_BW:
+                if ( !table_entry ) {
+                    netsnmp_set_request_error(reqinfo, request,
+                                              SNMP_NOSUCHINSTANCE);
+                    continue;
+                }
+                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
+                                            table_entry->sccUL_BW);
+                break;
+            case COLUMN_SCCUL_RFCN:
+                if ( !table_entry ) {
+                    netsnmp_set_request_error(reqinfo, request,
+                                              SNMP_NOSUCHINSTANCE);
+                    continue;
+                }
+                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
+                                            table_entry->sccUL_RFCN);
+                break;
+            default:
+                netsnmp_set_request_error(reqinfo, request,
+                                          SNMP_NOSUCHOBJECT);
+                break;
+            }
+        }
+        break;
+
+    }
+    return SNMP_ERR_NOERROR;
+}
--- /dev/null
+++ b/agent/mibgroup/ZYXEL-PRESTIGE-MIB/cellinfMIB.h
@@ -0,0 +1,40 @@
+/*
+ * Note: this file originally auto-generated by mib2c
+ * using mib2c.scalar.conf
+ */
+#ifndef CELLINFMIB_H
+#define CELLINFMIB_H
+
+/* function declarations */
+void init_cellinfMIB(void);
+void initialize_table_sccTable(void);
+
+Netsnmp_Node_Handler handle_supportedAccessTechnologies;
+Netsnmp_Node_Handler handle_currentAccessTechnology;
+Netsnmp_Node_Handler handle_preferredAccessTechnology;
+Netsnmp_Node_Handler sccTable_handler;
+Netsnmp_First_Data_Point  sccTable_get_first_data_point;
+Netsnmp_Next_Data_Point   sccTable_get_next_data_point;
+NetsnmpCacheLoad sccTable_load;
+NetsnmpCacheFree sccTable_free;
+
+#define SCCTABLE_TIMEOUT  60
+
+/* column number definitions for table sccTable */
+       #define COLUMN_SCCINDEX		1
+       #define COLUMN_SCCENABLE		2
+       #define COLUMN_SCCPHYSICALCELLID		3
+       #define COLUMN_SCCRFCN		4
+       #define COLUMN_SCCBAND		5
+       #define COLUMN_SCCBANDNUM		6
+       #define COLUMN_SCCRSSI		7
+       #define COLUMN_SCCRSRP		8
+       #define COLUMN_SCCRSRQ		9
+       #define COLUMN_SCCSINR		10
+       #define COLUMN_SCCCA_STATE		11
+       #define COLUMN_SCCDL_BW		12
+       #define COLUMN_SCCUL_CONFIGURED		13
+       #define COLUMN_SCCUL_BW		14
+       #define COLUMN_SCCUL_RFCN		15
+
+#endif /* CELLINFMIB_H */
--- /dev/null
+++ b/mibs/CELLINTF-SMI.txt
@@ -0,0 +1,203 @@
+CELLINTF-SMI DEFINITIONS ::= BEGIN
+IMPORTS
+    MODULE-IDENTITY,
+    OBJECT-IDENTITY,
+    OBJECT-TYPE,
+    Integer32,
+    Unsigned32,
+    enterprises
+        FROM SNMPv2-SMI
+    DisplayString,
+    TruthValue
+        FROM SNMPv2-TC;
+
+cellinfMIB MODULE-IDENTITY
+    LAST-UPDATED "202303080000Z"
+    ORGANIZATION "ZYXEL"
+    CONTACT-INFO "Perry.Peng@mitrastar.com.tw"
+    DESCRIPTION  "Cellular interface info. Each instance of this object models a cellular modem with a single radio and a single USIM."
+    REVISION     "202303080000Z"
+    DESCRIPTION  "Establish Cellular interface"
+
+::= { enterprises 890 5 }
+
+sccObjects OBJECT IDENTIFIER ::= { cellinfMIB 4 }
+
+supportedAccessTechnologies OBJECT-TYPE
+    SYNTAX      DisplayString
+    MAX-ACCESS  read-only
+    STATUS      current
+    DESCRIPTION "supportedAccessTechnologies"
+    ::= { cellinfMIB 1 }
+
+currentAccessTechnology OBJECT-TYPE
+    SYNTAX      DisplayString
+    MAX-ACCESS  read-only
+    STATUS      current
+    DESCRIPTION "currentAccessTechnology"
+    ::= { cellinfMIB 2 }
+
+preferredAccessTechnology OBJECT-TYPE
+    SYNTAX      DisplayString
+    MAX-ACCESS  read-write
+    STATUS      current
+    DESCRIPTION "preferredAccessTechnology"
+    ::= { cellinfMIB 3 }
+
+sccTable OBJECT-TYPE
+    SYNTAX      SEQUENCE OF SCCEntry
+    MAX-ACCESS  not-accessible
+    STATUS      current
+    DESCRIPTION
+        "A table of scc entries."
+    ::= { sccObjects 1 }
+
+sccEntry OBJECT-TYPE
+    SYNTAX        SCCEntry
+    MAX-ACCESS    not-accessible
+    STATUS        current
+    DESCRIPTION
+        "An entry in the hero table."
+    INDEX        { sccIndex }
+    ::= { sccTable 1 }
+
+SCCEntry ::=
+    SEQUENCE {
+        sccIndex            Integer32,
+        sccEnable           TruthValue,
+        sccPhysicalCellID   Integer32,
+        sccRFCN             Unsigned32,
+        sccBand             DisplayString,
+        sccBandNum          Unsigned32,
+        sccRSSI             Integer32,
+        sccRSRP             Integer32,
+        sccRSRQ             Integer32,
+        sccSINR             Integer32,
+        sccCA-STATE         Integer32,
+        sccDL-BW            Integer32,
+        sccUL-CONFIGURED    Unsigned32,
+        sccUL-BW            Integer32,
+        sccUL-RFCN          Unsigned32
+    }
+
+sccIndex OBJECT-TYPE
+    SYNTAX        Integer32 (1..65535)
+    MAX-ACCESS  not-accessible
+    STATUS        current
+    DESCRIPTION
+        "sccIndex"
+    ::= { sccEntry 1 }
+
+sccEnable OBJECT-TYPE
+    SYNTAX        TruthValue
+    MAX-ACCESS  read-only
+    STATUS        current
+    DESCRIPTION
+        "sccEnable"
+    ::= { sccEntry 2 }
+
+sccPhysicalCellID OBJECT-TYPE
+    SYNTAX        Integer32 (-1..503)
+    MAX-ACCESS  read-only
+    STATUS        current
+    DESCRIPTION
+        "sccPhysicalCellID"
+    ::= { sccEntry 3 }
+
+sccRFCN OBJECT-TYPE
+    SYNTAX        Unsigned32 (0..65535)
+    MAX-ACCESS  read-only
+    STATUS        current
+    DESCRIPTION
+        "sccRFCN"
+    ::= { sccEntry 4 }
+
+sccBand OBJECT-TYPE
+    SYNTAX        DisplayString
+    MAX-ACCESS  read-only
+    STATUS        current
+    DESCRIPTION
+        "sccBand"
+    ::= { sccEntry 5 }
+
+sccBandNum OBJECT-TYPE
+    SYNTAX        Unsigned32
+    MAX-ACCESS  read-only
+    STATUS        current
+    DESCRIPTION
+        "sccBandNum"
+    ::= { sccEntry 6 }
+
+sccRSSI OBJECT-TYPE
+    SYNTAX        Integer32
+    MAX-ACCESS  read-only
+    STATUS        current
+    DESCRIPTION
+        "sccRSSI"
+    ::= { sccEntry 7 }
+
+sccRSRP OBJECT-TYPE
+    SYNTAX        Integer32 (-140..-44)
+    MAX-ACCESS  read-only
+    STATUS        current
+    DESCRIPTION
+        "sccRSRP"
+    ::= { sccEntry 8 }
+
+sccRSRQ OBJECT-TYPE
+    SYNTAX        Integer32 (-240..0)
+    MAX-ACCESS  read-only
+    STATUS        current
+    DESCRIPTION
+        "sccRSRQ"
+    ::= { sccEntry 9 }
+
+sccSINR OBJECT-TYPE
+    SYNTAX        Integer32 (-20..50)
+    MAX-ACCESS  read-only
+    STATUS        current
+    DESCRIPTION
+        "sccSINR"
+    ::= { sccEntry 10 }
+
+sccCA-STATE OBJECT-TYPE
+    SYNTAX        Integer32
+    MAX-ACCESS  read-only
+    STATUS        current
+    DESCRIPTION
+        "sccCA-STATE"
+    ::= { sccEntry 11 }
+
+sccDL-BW OBJECT-TYPE
+    SYNTAX        Integer32 (-1..5)
+    MAX-ACCESS  read-only
+    STATUS        current
+    DESCRIPTION
+        "sccDL-BW"
+    ::= { sccEntry 12 }
+
+sccUL-CONFIGURED OBJECT-TYPE
+    SYNTAX        Unsigned32 (0..1)
+    MAX-ACCESS  read-only
+    STATUS        current
+    DESCRIPTION
+        "sccUL-CONFIGURED"
+    ::= { sccEntry 13 }
+
+sccUL-BW OBJECT-TYPE
+    SYNTAX        Integer32 (-1..5)
+    MAX-ACCESS  read-only
+    STATUS        current
+    DESCRIPTION
+        "sccUL-BW"
+    ::= { sccEntry 14 }
+
+sccUL-RFCN OBJECT-TYPE
+    SYNTAX        Unsigned32 (0..65535)
+    MAX-ACCESS  read-only
+    STATUS        current
+    DESCRIPTION
+        "sccUL-RFCN"
+    ::= { sccEntry 15 }
+
+END
