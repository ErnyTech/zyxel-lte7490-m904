--- a/ntpclient.c
+++ b/ntpclient.c
@@ -510,51 +510,6 @@ static void stuff_net_addr(struct in_add
 	}
 	memcpy(&(p->s_addr),ntpserver->h_addr_list[0],4);
 }
-#ifdef ZyXEL_PATCH
-static int getaddrbyname(char *host, struct sockaddr_storage *ss)
-{
-	int err;
-	struct addrinfo hints;
-	struct addrinfo *result;
-	struct addrinfo *rp;
-
-	if (!host || !ss) {
-		errno = EINVAL;
-		return 1;
-	}
-
-	memset(&hints, 0, sizeof(struct addrinfo));
-	hints.ai_family = AF_UNSPEC;
-	hints.ai_socktype = SOCK_DGRAM;
-	hints.ai_flags = AI_PASSIVE;
-	hints.ai_protocol = 0;
-	hints.ai_canonname = NULL;
-	hints.ai_addr = NULL;
-	hints.ai_next = NULL;
-
-	memset(ss, 0, sizeof(struct sockaddr_storage));
-	err = getaddrinfo(host, NULL, &hints, &result);
-	if (err) {
-		printf("Failed getaddrinfo() for hostname: %s: %s \n", host, gai_strerror(err));
-		return 1;
-	}
-
-	/* The first result will be used. IPV4 has higher priority */
-	for (rp = result; rp; rp = rp->ai_next) {
-		if (rp->ai_family == AF_INET) {
-			memcpy(ss, (struct sockaddr_in *)(rp->ai_addr), sizeof(struct sockaddr_in));
-			break;
-		}
-		if (rp->ai_family == AF_INET6) {
-			memcpy(ss, (struct sockaddr_in6 *)(rp->ai_addr), sizeof(struct sockaddr_in6));
-			break;
-		}
-	}
-	freeaddrinfo(result);
-
-	return 0;
-}
-#endif
 
 #ifdef ZyXEL_PATCH
 static void setup_receive(int usd, short port)
@@ -612,10 +567,35 @@ int setup_transmit(int usd, struct ntp_c
 	struct sockaddr_in6 *ipv6;
 	struct sockaddr_in *ipv4;
 	socklen_t len = 0;
+	int err;
+	struct addrinfo hints;
+	struct addrinfo *result;
+	struct addrinfo *rp;
 	host = ntpc->ntp_server[host_idx].hostname;
 	port = ntpc->ntp_server[host_idx].port;
-	memset(&ss,0,sizeof( struct sockaddr_storage));
-	while (getaddrbyname(host, &ss)) {
+
+	if (!host || !(&ss)) {
+		errno = EINVAL;
+		return 1;
+	}
+	memset(&hints, 0, sizeof(struct addrinfo));
+	hints.ai_family = AF_UNSPEC;
+	hints.ai_socktype = SOCK_DGRAM;
+	hints.ai_flags = AI_PASSIVE;
+	hints.ai_protocol = 0;
+	hints.ai_canonname = NULL;
+	hints.ai_addr = NULL;
+	hints.ai_next = NULL;
+	while (1) {
+		err = getaddrinfo(host, NULL, &hints, &result);
+		if (err) {
+			if (debug)
+				printf("Failed getaddrinfo() for NTP Server hostname: %s: %s \n", host, gai_strerror(err));
+		}
+		else{
+			break;
+		}
+
 		if (EINVAL != errno && ntpc->live) {
 			/* Wait here a while, networking is probably not up yet. */
 			sleep(1);
@@ -627,26 +606,48 @@ int setup_transmit(int usd, struct ntp_c
 
 		return 1;
 	}
-	ntpc->ntp_server[host_idx].isResolv = 1;
-	memcpy(&(ntpc->ntp_server[host_idx].ss), &ss, sizeof(struct sockaddr_storage));
 
-	/* Prefer IPv4 over IPv6, for now */
-	if (ss.ss_family == AF_INET) {
-		ipv4 = (struct sockaddr_in *)(&ss);
-		ipv4->sin_port = htons(port);
-		len = sizeof(struct sockaddr_in);
-	} else if (ss.ss_family == AF_INET6) {
-		ipv6 = (struct sockaddr_in6 *)(&ss);
-		ipv6->sin6_port = htons(port);
-		len = sizeof(struct sockaddr_in6);
-	} else {
-		printf("%s: Unsupported address family", __func__);
-		return 0;
+	memset(&ss, 0, sizeof(struct sockaddr_storage));
+
+	/* The first result will be used. IPV4 has higher priority */
+	for (rp = result; rp; rp = rp->ai_next) {
+		memset(&ss, 0, sizeof(struct sockaddr_storage));
+		if (rp->ai_family == AF_INET) {
+			memcpy(&ss, (struct sockaddr_in *)(rp->ai_addr), sizeof(struct sockaddr_in));
+		}
+		if (rp->ai_family == AF_INET6) {
+			memcpy(&ss, (struct sockaddr_in6 *)(rp->ai_addr), sizeof(struct sockaddr_in6));
+		}
+		ntpc->ntp_server[host_idx].isResolv = 1;
+		memcpy(&(ntpc->ntp_server[host_idx].ss), &ss, sizeof(struct sockaddr_storage));
+
+		/* Prefer IPv4 over IPv6, for now */
+		if (ss.ss_family == AF_INET) {
+			ipv4 = (struct sockaddr_in *)(&ss);
+			ipv4->sin_port = htons(port);
+			len = sizeof(struct sockaddr_in);
+		} else if (ss.ss_family == AF_INET6) {
+			ipv6 = (struct sockaddr_in6 *)(&ss);
+			ipv6->sin6_port = htons(port);
+			len = sizeof(struct sockaddr_in6);
+		} else {
+			if (debug)
+				printf("%s: Unsupported address family\n", __func__);
+			continue;
+		}
+		if (connect(usd,(struct sockaddr *)&ss,len)==-1)
+			continue;
+		else
+		{
+			freeaddrinfo(result);
+			return 1;
+		}
+
 	}
-	if (connect(usd,(struct sockaddr *)&ss,len)==-1)
-		return 0;
-	else
-		return 1;
+
+	freeaddrinfo(result);
+	return 0;
+
 }
 #else
 static void setup_transmit(int usd, char *host, short port, struct ntp_control *ntpc)
