diff -urN udhcp-0.9.8.orig/dhcpc.c udhcp-0.9.8/dhcpc.c
--- udhcp-0.9.8.orig/dhcpc.c	2022-04-29 10:21:40.331463000 +0800
+++ udhcp-0.9.8/dhcpc.c	2022-04-29 10:27:13.375463000 +0800
@@ -309,6 +309,42 @@
 
 }
 
+#ifdef SUPPORT_RILCMD
+zcfgRet_t zcfgCommonSendAndGetReplay(zcfgEid_t dstEid, int msg_type, zcfg_offset_t rdmObjId, objIndex_t *objIid, int payloadLen, char *payload, char *reserve, void **replayPayload)
+{
+        zcfgRet_t ret;
+        void *sendBuf = NULL;
+        void *recvBuf = NULL;
+        zcfgMsg_t *sendMsgHdr = NULL;
+        char *recv_str = NULL;
+        int buf_size = 0;
+
+        buf_size = sizeof(zcfgMsg_t)+payloadLen+1;
+        sendBuf = calloc(1,buf_size);
+        sendMsgHdr = (zcfgMsg_t*)sendBuf;
+
+        sendMsgHdr->type = msg_type;
+        sendMsgHdr->oid = rdmObjId;
+        sendMsgHdr->length = payloadLen+1;
+        sendMsgHdr->srcEid = ZCFG_EID_UDHCPC;
+        sendMsgHdr->dstEid = dstEid;
+
+        if(objIid != NULL) memcpy(sendMsgHdr->objIid, objIid, sizeof(objIndex_t));
+        if(reserve != NULL) memcpy(sendMsgHdr->reserve, reserve, sizeof(sendMsgHdr->reserve)-1);
+        if(payload != NULL) memcpy(sendBuf+sizeof(zcfgMsg_t), payload, payloadLen);
+
+        ret = zcfgMsgSendAndGetReply(sendMsgHdr, (zcfgMsg_t **)&recvBuf, 15000);
+
+        if(ret == ZCFG_SUCCESS) {
+                if(replayPayload){
+                        *replayPayload = recvBuf;
+                }
+                else free(recvBuf);
+        }
+
+        return ret;
+}
+#endif
 
 #ifdef COMBINED_BINARY
 int udhcpc_main(int argc, char *argv[])
@@ -330,6 +366,12 @@
 	int max_fd;
 	int sig;
 	int vlanHuntEnable = 0;
+#ifdef SUPPORT_RILCMD
+	int sendDiscoverCount = 0;
+	int informRilcmdflag = 0;
+	void *recvBuf = NULL;
+	char payload[8] = {0};
+#endif
 
 #ifdef SUNRISE_DHCP_FORCE_RENEW //DHCP Force Renew
 	char renewkey[128] = {0};
@@ -527,6 +569,15 @@
 					
 					timeout = now + ((packet_num == 2) ? 4 : 2);
 					packet_num++;
+#ifdef SUPPORT_RILCMD
+					sendDiscoverCount++;
+
+					if (sendDiscoverCount > 2 && !informRilcmdflag) {
+						snprintf(payload, sizeof(payload), client_config.interface);
+						zcfgCommonSendAndGetReplay(ZCFG_EID_RILCMD, ZCFG_MSG_CELL_ZY_SEND_DISCOVER_NO_RESPONSE, 0, NULL, strlen(payload), payload, NULL, &recvBuf);
+						informRilcmdflag = 1;
+					}
+#endif
 				} else {
 					if (client_config.background_if_no_lease
 #if 1 // ZyXEL IWei 20160623, fix kernel memory leak (in ps Slab value), do not need fork to background again and again.
@@ -546,6 +597,11 @@
 				break;
 			case RENEW_REQUESTED:
 			case REQUESTING:
+#ifdef SUPPORT_RILCMD
+				sendDiscoverCount = 0;
+				informRilcmdflag = 0;
+				zcfgCommonSendAndGetReplay(ZCFG_EID_RILCMD, ZCFG_MSG_CELL_ZY_SEND_DISCOVER_REQUESTING, 0, NULL, 0, NULL, NULL, &recvBuf);
+#endif
 				if (packet_num < 3) {
 					/* send request packet */
 					if (state == RENEW_REQUESTED)
diff -urN udhcp-0.9.8.orig/Makefile udhcp-0.9.8/Makefile
--- udhcp-0.9.8.orig/Makefile	2022-04-29 10:21:40.331463000 +0800
+++ udhcp-0.9.8/Makefile	2022-04-29 10:25:18.551463000 +0800
@@ -94,6 +94,10 @@
 CFLAGS += -DSUNRISE_VLANHUNT_CUSTOMIZATION
 endif
 
+ifeq ($(CONFIG_PACKAGE_rilcmd),y)
+CFLAGS += -DSUPPORT_RILCMD
+endif
+
 all: clean $(EXEC1) $(EXEC2) $(EXEC3)
 	$(STRIP) --remove-section=.note --remove-section=.comment $(EXEC1) $(EXEC2) $(EXEC3)
 
