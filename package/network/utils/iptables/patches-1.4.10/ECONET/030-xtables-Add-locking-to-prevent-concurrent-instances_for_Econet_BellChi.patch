Index: iptables-1.4.10/iptables-standalone.c
===================================================================
--- iptables-1.4.10.orig/iptables-standalone.c	2010-10-29 22:37:22.000000000 +0800
+++ iptables-1.4.10/iptables-standalone.c	2017-05-19 10:34:26.504747319 +0800
@@ -36,8 +36,16 @@
 #include <errno.h>
 #include <string.h>
 #include <iptables.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <unistd.h>
+#include "xtables.h"
 #include "iptables-multi.h"
 
+#define XTMSOCKET_NAME "xtables_multi"
+#define XTMSOCKET_LEN 14
+#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)
+
 #ifdef IPTABLES_MULTI
 int
 iptables_main(int argc, char *argv[])
@@ -62,6 +70,33 @@
 	init_extensions();
 #endif
 
+	int i = 0, xtm_socket;
+	struct sockaddr_un xtm_addr;
+
+	memset(&xtm_addr, 0, sizeof(xtm_addr));
+	xtm_addr.sun_family = AF_UNIX;
+	strcpy(xtm_addr.sun_path+1, XTMSOCKET_NAME);
+	xtm_socket = socket(AF_UNIX, SOCK_STREAM, 0);
+	/* If we can't even create a socket, just revert to prior (lockless) behavior */
+	if (xtm_socket < 0){
+		goto IPTABLES;
+		//return subcmd_main(argc, argv, multi_subcommands);
+	}
+
+	do {
+		ret = bind(xtm_socket, (struct sockaddr*)&xtm_addr, offsetof(struct sockaddr_un, sun_path)+XTMSOCKET_LEN);
+		if (ret == 0){
+			goto IPTABLES;
+			//return subcmd_main(argc, argv, multi_subcommands);
+		}
+		i++;
+		usleep(50000);
+	} while (i < 100);
+
+	fprintf(stderr, "ERROR: unable to obtain lock - another instance is already running\n");
+	exit(RESOURCE_PROBLEM);
+
+IPTABLES:
 	ret = do_command(argc, argv, &table, &handle);
 	if (ret) {
 		ret = iptc_commit(handle);
