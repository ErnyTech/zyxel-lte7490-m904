Index: libzyutil-1.0/BROADCOM/libzyutil_wrapper.c
===================================================================
--- libzyutil-1.0.orig/BROADCOM/libzyutil_wrapper.c	2020-01-18 18:37:14.928558382 +0800
+++ libzyutil-1.0/BROADCOM/libzyutil_wrapper.c	2020-01-18 18:38:38.499348939 +0800
@@ -16,6 +16,133 @@
 #define PROC_NVRAM_BOARDID  "/proc/nvram/boardid"
 #endif
 
+#ifdef ZYXEL_AT_SET_KEY
+//int zyUtilIsPrintableString(char *tmp, int len){
+//    int i=0;
+//    for( i=0 ; i<len ; i++ )
+//    {
+//        if( (tmp[i] < 0x20) || (tmp[i] > 0x7e) )
+//            return ZCFG_INTERNAL_ERROR;
+//    }
+//    return ZCFG_SUCCESS;
+//}
+extern int zyUtilIsPrintableString(char *tmp, int len);
+
+#ifdef ZYXEL_AT_SET_SUPERVISOR_KEY
+int zyGetSupervisorPWD(char *buf, int len){
+    NVRAM_DATA nvramData;
+    int _string_len=0;
+
+    if( (NVRAM_SUPER_PWD_LEN+1) != len) {
+        //printf(" #### zyGetSupervisorPWD #### - Failed zyGetSupervisorPWD Failed\n");
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    memset(&nvramData, 0, sizeof(NVRAM_DATA));
+    memset(buf, 0, len);
+
+    if(nvramDataGet(&nvramData) < 0){
+        //printf(" #### zyGetSupervisorPWD #### - Failed zyGetSupervisorPWD Failed\n");
+        return ZCFG_INTERNAL_ERROR;
+    }
+    //printf(" #### zyGetSupervisorPWD #### - nvramData.supervisor = %s\n", nvramData.supervisor);
+    //printf(" #### zyGetSupervisorPWD #### - nvramData.supervisor len = %d\n", strlen(nvramData.supervisor));
+    _string_len = strlen(nvramData.supervisor);
+    if(_string_len>NVRAM_SUPER_PWD_LEN)
+        _string_len = NVRAM_SUPER_PWD_LEN;
+
+    if ( _string_len == 0){
+        //printf(" #### zyGetSupervisorPWD #### - Failed - zyGetSupervisorPWD Empty\n");
+        return ZCFG_INTERNAL_ERROR;
+    }else if( zyUtilIsPrintableString(nvramData.supervisor, _string_len) != 0 ){
+        //printf(" #### zyGetSupervisorPWD #### - Failed - zyGetSupervisorPWD is not printable string\n");
+        return ZCFG_INTERNAL_ERROR;
+    }
+    memcpy(buf, nvramData.supervisor, NVRAM_SUPER_PWD_LEN);
+    printf("%s Set to default passowrd\n", __FUNCTION__);
+
+    return ZCFG_SUCCESS;
+}
+int zyGetSupervisorPWDMaxLength(void){
+	return NVRAM_SUPER_PWD_LEN;
+}
+#endif
+int zyGetAdminPWD(char *buf, int len){
+    NVRAM_DATA nvramData;
+    int _string_len=0;
+
+    if( (NVRAM_ADMIN_PWD_LEN+1) != len) {
+        //printf(" #### zyGetAdminPWD #### - Failed zyGetAdminPWD Failed\n");
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    memset(&nvramData, 0, sizeof(NVRAM_DATA));
+    memset(buf, 0, len);
+
+    if(nvramDataGet(&nvramData) < 0){
+        //printf(" #### zyGetAdminPWD #### - Failed zyGetAdminPWD Failed\n");
+        return ZCFG_INTERNAL_ERROR;
+    }
+    //printf(" #### zyGetAdminPWD #### - nvramData.admin = %s\n", nvramData.admin);
+    //printf(" #### zyGetAdminPWD #### - nvramData.admin len = %d\n", strlen(nvramData.admin));
+    _string_len = strlen(nvramData.admin);
+    if(_string_len>NVRAM_ADMIN_PWD_LEN)
+        _string_len = NVRAM_ADMIN_PWD_LEN;
+
+    if ( _string_len == 0){
+        //printf(" #### zyGetAdminPWD #### - Failed - zyGetAdminPWD Empty\n");
+        return ZCFG_INTERNAL_ERROR;
+    }else if( zyUtilIsPrintableString(nvramData.admin, _string_len) != 0 ){
+        //printf(" #### zyGetAdminPWD #### - Failed - zyGetAdminPWD is not printable string\n");
+        return ZCFG_INTERNAL_ERROR;
+    }
+    memcpy(buf, nvramData.admin, NVRAM_ADMIN_PWD_LEN);
+    printf("%s Set to default passowrd\n", __FUNCTION__);
+
+    return ZCFG_SUCCESS;
+}
+int zyGetAdminPWDMaxLength(void){
+	return NVRAM_ADMIN_PWD_LEN;
+}
+int zyGetPSK(char *buf, int len){
+    NVRAM_DATA nvramData;
+    int _string_len=0;
+
+    if( (NVRAM_KEYPASSPHRASE_LEN+1) != len) {
+        //printf(" #### zyGetPSK #### - Failed zyGetPSK Failed\n");
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    memset(&nvramData, 0, sizeof(NVRAM_DATA));
+    memset(buf, 0, len);
+
+    if(nvramDataGet(&nvramData) < 0){
+        //printf(" #### zyGetPSK #### - Failed zyGetPSK Failed\n");
+        return ZCFG_INTERNAL_ERROR;
+    }
+    //printf(" #### zyGetPSK #### - nvramData.WpaPskKey = %s\n", nvramData.WpaPskKey);
+    //printf(" #### zyGetPSK #### - nvramData.WpaPskKey len = %d\n", strlen(nvramData.WpaPskKey));
+    _string_len = strlen(nvramData.WpaPskKey);
+    if(_string_len>NVRAM_KEYPASSPHRASE_LEN)
+        _string_len = NVRAM_KEYPASSPHRASE_LEN;
+
+    if ( _string_len == 0){
+        //printf(" #### zyGetPSK #### - Failed - zyGetPSK Empty\n");
+        return ZCFG_INTERNAL_ERROR;
+    }else if( zyUtilIsPrintableString(nvramData.WpaPskKey, _string_len) != 0 ){
+        //printf(" #### zyGetPSK #### - Failed - zyGetPSK is not printable string\n");
+        return ZCFG_INTERNAL_ERROR;
+    }
+    memcpy(buf, nvramData.WpaPskKey, NVRAM_KEYPASSPHRASE_LEN);
+    printf("%s Set to default Psk\n", __FUNCTION__);
+
+    return ZCFG_SUCCESS;
+}
+int zyGetPSKMaxLength(void){
+	return NVRAM_KEYPASSPHRASE_LEN;
+}
+#endif
+
 #ifdef SUPPORT_LANVLAN
 zcfgRet_t zyUtilISetIfState(char *ifName, bool up)
 {
Index: libzyutil-1.0/zyutil.h
===================================================================
--- libzyutil-1.0.orig/zyutil.h	2020-01-18 18:37:14.844558382 +0800
+++ libzyutil-1.0/zyutil.h	2020-01-18 18:37:14.960558382 +0800
@@ -149,9 +149,56 @@
 #endif
 
 #ifdef ZYXEL_AT_SET_KEY
-char *zyGetSupervisorPWD(void);
-char *zyGetAdminPWD(void);
-char *zyGetPSK(void);
+#ifdef ZYXEL_AT_SET_SUPERVISOR_KEY
+/*!
+ *  Get Supervisor password from MRD.
+ *
+ *  @param[in,out] char *buf    Return string of Supervisor password, address should be provided by caller.
+ *  @param[in] int len          Max Lenth of buf string.
+ *  @return                     ZCFG_SUCCESS        : ok, return printable string.
+ *                              ZCFG_INTERNAL_ERROR : error.
+ */
+int zyGetSupervisorPWD(char *buf, int len);
+/*!
+ *  Get Max string length of Supervisor password from MRD.
+ *
+ *  @return                     ZCFG_SUCCESS        : ok, return Max string length of Supervisor password
+ *                              ZCFG_INTERNAL_ERROR : error.
+ */
+int zyGetSupervisorPWDMaxLength(void);
+#endif
+/*!
+ *  Get Admin password from MRD.
+ *
+ *  @param[in,out] char *buf    Return string of Admin password, address should be provided by caller.
+ *  @param[in] int len          Max Lenth of buf string.
+ *  @return                     ZCFG_SUCCESS        : ok, return printable string.
+ *                              ZCFG_INTERNAL_ERROR : error.
+ */
+int zyGetAdminPWD(char *buf, int len);
+/*!
+ *  Get Max string length of Admin password from MRD.
+ *
+ *  @return                     ZCFG_SUCCESS        : ok, return Max string length of Admin password
+ *                              ZCFG_INTERNAL_ERROR : error.
+ */
+int zyGetAdminPWDMaxLength(void);
+/*!
+ *  Get WiFi PSK key from MRD.
+ *
+ *  @param[in,out] char *buf    Return string of WiFi PSK key, address should be provided by caller.
+ *  @param[in] int len          Max Lenth of buf string.
+ *  @return                     ZCFG_SUCCESS        : ok, return printable string.
+ *                              ZCFG_INTERNAL_ERROR : error.
+ */
+int zyGetPSK(char *buf, int len);
+/*!
+ *  Get Max string length of WiFi PSK key from MRD.
+ *
+ *  @return                     ZCFG_SUCCESS        : ok, return Max string length of WiFi PSK key
+ *                              ZCFG_INTERNAL_ERROR : error.
+ */
+int zyGetPSKMaxLength(void);
 #endif
 
 /*!
@@ -183,4 +230,13 @@
  */
 int zyUtilChkPwdFormat(char *str, int inputLen, int chkLen);
 
+/*!
+ *  Check the string is printable.
+ *
+ *  @param[in] char *str        Input string.
+ *  @param[in] int inputLen     Lenth of input string.
+ *  @return                     0:ok; -1:error.
+ */
+int zyUtilIsPrintableString(char *tmp, int len);
+
 #endif
Index: libzyutil-1.0/ECONET/libzyutil_wrapper.c
===================================================================
--- libzyutil-1.0.orig/ECONET/libzyutil_wrapper.c	2020-01-18 18:37:14.944558382 +0800
+++ libzyutil-1.0/ECONET/libzyutil_wrapper.c	2020-01-18 18:38:12.087278595 +0800
@@ -1018,26 +1018,81 @@
 #endif
 
 #ifdef ZYXEL_AT_SET_KEY
-char *zyGetSupervisorPWD(void){
-	MRD_DATA mrd = {0};
-	static char fake[MRD_SUPER_PWD_LEN+1] = {0};
-	if (ZCFG_SUCCESS == zyUtilGetMrdInfo(&mrd))
-		memcpy(fake, mrd.supervisor, MRD_SUPER_PWD_LEN);
-    return fake;
-}
-char *zyGetAdminPWD(void){
-	MRD_DATA mrd = {0};
-	static char fake[MRD_ADMIN_PWD_LEN+1] = {0};
-	if (ZCFG_SUCCESS == zyUtilGetMrdInfo(&mrd))
-		memcpy(fake, mrd.admin, MRD_ADMIN_PWD_LEN);
-    return fake;
-}
-char *zyGetPSK(void){
-	MRD_DATA mrd = {0};
-	static char fake[MRD_KEYPASSPHRASE_LEN+1] = {0};
-	if (ZCFG_SUCCESS == zyUtilGetMrdInfo(&mrd))
-		memcpy(fake, mrd.WpaPskKey, MRD_KEYPASSPHRASE_LEN);
-    return fake;
+//int zyUtilIsPrintableString(char *tmp, int len){
+//    int i=0;
+//    for( i=0 ; i<len ; i++ )
+//    {
+//        if( (tmp[i] < 0x20) || (tmp[i] > 0x7e) )
+//            return ZCFG_INTERNAL_ERROR;
+//    }
+//    return ZCFG_SUCCESS;
+//}
+extern int zyUtilIsPrintableString(char *tmp, int len);
+#ifdef ZYXEL_AT_SET_SUPERVISOR_KEY
+int zyGetSupervisorPWD(char *buf, int len){
+    MRD_DATA mrd = {0};
+    int _string_len=0;
+
+    if( (MRD_SUPER_PWD_LEN+1) != len)
+        return ZCFG_INTERNAL_ERROR;
+
+    if (ZCFG_SUCCESS != zyUtilGetMrdInfo(&mrd))
+        return ZCFG_INTERNAL_ERROR;
+
+    _string_len = strlen(mrd.supervisor);
+    if( (_string_len == 0) || zyUtilIsPrintableString(mrd.supervisor, (_string_len>MRD_SUPER_PWD_LEN)?MRD_SUPER_PWD_LEN:_string_len) != 0 )
+        return ZCFG_INTERNAL_ERROR;
+
+    memcpy(buf, mrd.supervisor, MRD_SUPER_PWD_LEN);
+    printf("%s Set to default passowrd\n", __FUNCTION__);
+
+    return ZCFG_SUCCESS;
+}
+int zyGetSupervisorPWDMaxLength(void){
+	return MRD_SUPER_PWD_LEN;
+}
+#endif
+int zyGetAdminPWD(char *buf, int len){
+    MRD_DATA mrd = {0};
+    int _string_len=0;
+
+    if( (MRD_ADMIN_PWD_LEN+1) != len)
+        return ZCFG_INTERNAL_ERROR;
+
+    if (ZCFG_SUCCESS != zyUtilGetMrdInfo(&mrd))
+        return ZCFG_INTERNAL_ERROR;
+
+    _string_len = strlen(mrd.admin);
+    if( (_string_len == 0) || zyUtilIsPrintableString(mrd.admin, (_string_len>MRD_ADMIN_PWD_LEN)?MRD_ADMIN_PWD_LEN:_string_len) != 0 )
+        return ZCFG_INTERNAL_ERROR;
+
+    memcpy(buf, mrd.admin, MRD_ADMIN_PWD_LEN);
+    printf("%s Set to default passowrd\n", __FUNCTION__);
+
+    return ZCFG_SUCCESS;
+}
+int zyGetAdminPWDMaxLength(void){
+	return MRD_ADMIN_PWD_LEN;
+}
+int zyGetPSK(char *buf, int len){
+    MRD_DATA mrd = {0};
+    int _string_len=0;
+
+    if( (MRD_KEYPASSPHRASE_LEN+1) != len)
+        return ZCFG_INTERNAL_ERROR;
+
+    if (ZCFG_SUCCESS != zyUtilGetMrdInfo(&mrd))
+        return ZCFG_INTERNAL_ERROR;
+
+    _string_len = strlen(mrd.WpaPskKey);
+    if( (_string_len == 0) || zyUtilIsPrintableString(mrd.WpaPskKey, (_string_len>MRD_KEYPASSPHRASE_LEN)?MRD_KEYPASSPHRASE_LEN:_string_len) != 0 )
+        return ZCFG_INTERNAL_ERROR;
+
+    memcpy(buf, mrd.WpaPskKey, MRD_KEYPASSPHRASE_LEN);
+    return ZCFG_SUCCESS;
+}
+int zyGetPSKMaxLength(void){
+	return MRD_KEYPASSPHRASE_LEN;
 }
 #endif
 #endif
Index: libzyutil-1.0/common.c
===================================================================
--- libzyutil-1.0.orig/common.c	2020-01-18 18:37:14.920558382 +0800
+++ libzyutil-1.0/common.c	2020-01-18 18:37:59.687171402 +0800
@@ -1724,6 +1724,23 @@
 }
 
 /*!
+ *  Check the string is printable.
+ *
+ *  @param[in] char *str        Input string.
+ *  @param[in] int inputLen     Lenth of input string.
+ *  @return                     0:ok; -1:error.
+ */
+int zyUtilIsPrintableString(char *tmp, int len){
+    int i=0;
+    for( i=0 ; i<len ; i++ )
+    {
+        if( (tmp[i] < 0x20) || (tmp[i] > 0x7e) )
+            return -1;
+    }
+    return 0;
+}
+
+/*!
 *  replace string
 *  @param[IN/OUT]	source
 *  @param[IN]	find_str //keyword
